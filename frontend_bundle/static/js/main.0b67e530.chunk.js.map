{"version":3,"sources":["utils.js","fetchWrapper.js","components/App.js","components/cabecera/Cabecera.js","components/pie/Pie.js","index.js"],"names":["getCookie","cookieName","qualifiedName","cookie","document","split","find","c","indexOf","replace","baseUrl","process","readUrl","url","startsWith","handleErrors","response","ok","Error","statusText","get","headers","fetch","method","Accept","then","json","post","body","JSON","stringify","put","delete","App","exact","path","component","props","usuario","username","Component","Cabecera","state","className","href","Toggle","drop","id","bsPrefix","variant","data-toggle","aria-expanded","this","iniciales","animation","role","size","Menu","x-placement","Item","isAdmin","Pie","Index","instance","httpClient","data","setState","catch","error","console","log","ReactDOM","render","fallback","getElementById"],"mappings":"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","file":"static/js/main.0b67e530.chunk.js","sourcesContent":["//Función para obtener una cookie del navegador (más que nada usada para el csrf token de autenticación para django sin tener que implementar una store en redux)\r\nconst getCookie = (cookieName) => {\r\n  let qualifiedName = `${cookieName}=`;\r\n  let cookies = document.cookie.split(';');\r\n  let cookie = cookies.find((c) => {\r\n    return c.indexOf(qualifiedName) === 0;\r\n  });\r\n  cookie = cookie ? cookie.replace(qualifiedName, '') : '';\r\n  return cookie;\r\n};\r\n\r\nexport default getCookie;\r\n","import getCookie from './utils';\r\n\r\n//TODO: actualmente el backend de django se sirve en el puerto 8000, no obstante deberíamos agregar una forma de automatizar el cambio a donde apuntan las URLs para no deber hacer algo como esto manualmente:\r\nlet baseUrl = '';\r\nif (process) {\r\n  baseUrl =\r\n    process.env.NODE_ENV !== 'production' ? 'http://localhost:8000' : '';\r\n}\r\n\r\n/**\r\n * Si la URL con la que se intenta realizar la request no contiene 'http' ni 'https', entonces se asume que es un fragmento al que debemos agrearle el path inicial\r\n * @param {string}  url url to fetch\r\n **/\r\nconst readUrl = (url = '') =>\r\n  url.startsWith('http://') || url.startsWith('https://')\r\n    ? url\r\n    : baseUrl\r\n    ? `${baseUrl}/${url}`\r\n    : url;\r\n\r\n/**\r\n * Maneja todas las respuestas que no son 200 (OK) como errores\r\n * @param {*} response\r\n */\r\nfunction handleErrors(response) {\r\n  if (!response.ok) {\r\n    throw Error(response.statusText);\r\n  }\r\n  return response;\r\n}\r\n\r\nconst get = (url = '', headers = {}) =>\r\n  fetch(readUrl(url), {\r\n    method: 'GET',\r\n    headers: {\r\n      Accept: 'application/json',\r\n      'Content-Type': 'application/json',\r\n      ...headers,\r\n      'X-CSRFToken': getCookie('csrftoken')\r\n    }\r\n  })\r\n    .then(handleErrors)\r\n    .then((response) => response.json());\r\n\r\nconst post = (url = '', body = {}, headers = {}) =>\r\n  fetch(readUrl(url), {\r\n    method: 'POST',\r\n    body: JSON.stringify(body),\r\n    headers: {\r\n      Accept: 'application/json',\r\n      'Content-Type': 'application/json',\r\n      ...headers,\r\n      'X-CSRFToken': getCookie('csrftoken')\r\n    }\r\n  })\r\n    .then(handleErrors)\r\n    .then((response) => response.json());\r\n\r\nconst put = (url = '', body = {}, headers = {}) =>\r\n  fetch(readUrl(url), {\r\n    method: 'PUT',\r\n    body: JSON.stringify(body),\r\n    headers: {\r\n      Accept: 'application/json',\r\n      'Content-Type': 'application/json',\r\n      ...headers,\r\n      'X-CSRFToken': getCookie('csrftoken')\r\n    }\r\n  })\r\n    .then(handleErrors)\r\n    .then((response) => response.json());\r\n\r\nconst del = (url = '', headers = {}) =>\r\n  fetch(readUrl(url), {\r\n    method: 'DELETE',\r\n    headers: {\r\n      Accept: 'application/json',\r\n      'Content-Type': 'application/json',\r\n      ...headers,\r\n      'X-CSRFToken': getCookie('csrftoken')\r\n    }\r\n  })\r\n    .then(handleErrors)\r\n    .then((response) => response.json());\r\n\r\nexport default {\r\n  get,\r\n  post,\r\n  put,\r\n  delete: del\r\n};\r\n","import React, { Component } from 'react';\r\nimport { Route, BrowserRouter as Router } from 'react-router-dom';\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\n//import httpClient from '../fetchWrapper';\r\n\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  static propTypes = {\r\n    usuario: PropTypes.object\r\n  };\r\n\r\n  componentDidMount(){\r\n    //let instance = this;\r\n  }\r\n\r\n  //TODO: agregar history al router\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <Route\r\n          exact\r\n          path={['/']}\r\n          component={() => (\r\n            <div>\r\n              {this.props.usuario.username ? `Bienvenidx ${this.props.usuario.username}!` : `Nadie inició sesión aún (o estamos ejecutando mediante 'npm start' por lo que la autenticación de django no nos provée el token)`}\r\n              <span>Dicho sea de paso, este div debería ser un componente en un .js aparte, si bien no hace falta que implementemos redux, tendríamos que poner toda la data (y los métodos para llamar a la API) en el componente de index y su state y pasarlos como parámetros a los demás; App debería encargarse del routing más que nada</span>\r\n            </div>\r\n          )}\r\n        />\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\n\r\nimport Spinner from 'react-bootstrap/Spinner';\r\n\r\n//TODO: mover el router a index.js y usar los Links de ese componente con className=\"nav-link\" (en lugar del componente Nav.Link de react-bootstrap)\r\n\r\nimport './Cabecera.css';\r\n\r\nexport class Cabecera extends Component {\r\n  static propTypes = {\r\n    usuario: PropTypes.object\r\n  };\r\n\r\n  state = {};\r\n\r\n  render() {\r\n    return (\r\n      <header className=\"row w-100 m-0 p-0 d-flex justify-content-between align-items-center gework-bg-primario bg-primary\">\r\n        <Col className=\"col-12 col-md-4 d-flex justify-content-center navbar-brand\">\r\n          <a href=\"/\" className=\"d-flex justify-content-center\">\r\n            {/* TODO: agregar logo: <img\r\n              src=\"/static/logo.png\"\r\n              width=\"33px\"\r\n              height=\"33px\"\r\n              alt={\"Logo GeWork\"}\r\n            /> */}\r\n            <h1>GeWork</h1>\r\n          </a>\r\n        </Col>\r\n        <Col className=\"col-12 col-md-4 d-flex justify-content-end justify-content-md-center\">\r\n            <Dropdown>\r\n              <Dropdown.Toggle\r\n                drop=\"none\"\r\n                id=\"menu-usuario\"\r\n                bsPrefix=\"menu-usuario-style\"\r\n                variant=\"none\"\r\n              >\r\n                <span\r\n                  className=\"d-flex justify-content-center align-items-center dropdown-toggle username-circle gework-bg-secundario\"\r\n                  data-toggle=\"dropdown-menu\"\r\n                  aria-expanded=\"false\"\r\n                >\r\n                  {this.props.usuario.iniciales || (<Spinner\r\n                                animation=\"border\"\r\n                                role=\"status\"\r\n                                size=\"lg\"\r\n                              />)}\r\n                </span>\r\n              </Dropdown.Toggle>\r\n\r\n              <Dropdown.Menu x-placement=\"bottom-start\">\r\n                <Dropdown.Item href=\"/adminlogout/\">\r\n                  {`Cerrar sesión ${this.props.usuario.username || ''}`}\r\n                </Dropdown.Item>\r\n                {this.props.usuario.isAdmin ? (\r\n                  <Dropdown.Item href=\"/admin\">\r\n                    Administración\r\n                  </Dropdown.Item>\r\n                ) : (\r\n                  ''\r\n                )}\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n        </Col>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Cabecera;\r\n","import React, { Component } from 'react';\r\n\r\nimport Row from 'react-bootstrap/Row';\r\n\r\nimport './Pie.css';\r\n\r\nclass Pie extends Component {\r\n  state = {}\r\n\r\n  render() {\r\n    return (\r\n        <footer>\r\n          <Row className=\"w-100 d-flex justify-content-end align-items-end\">\r\n            Cindi L. Martín - Sebastián R. Vansteenkiste\r\n          </Row>\r\n        </footer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Pie;\r\n","import React, { Suspense , Component} from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './components/App';\r\nimport Cabecera from './components/cabecera/Cabecera'\r\nimport Pie from './components/pie/Pie'\r\n\r\nimport httpClient from './fetchWrapper';\r\nimport getCookie from './utils';\r\n\r\nimport './index.css';\r\n\r\nclass Index extends Component {\r\n  state = {\r\n    usuario: {}\r\n  }\r\n\r\n  componentDidMount(){\r\n    let instance = this;\r\n\r\n    //Si hay un token de autenticación en las cookies del navegador, significa que ya inició sesión un usuario, por lo que podemos obtener sus detalles desde el backend\r\n    if(getCookie('csrftoken')){\r\n      httpClient\r\n        .get(`api/get_detalles_usuario`)\r\n        .then((data) => {\r\n          instance.setState({\r\n            usuario: data\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    }\r\n  }\r\n\r\n    render() {\r\n    return (\r\n      <div className=\"principal\">\r\n        <Cabecera usuario={this.state.usuario} />\r\n        <App usuario={this.state.usuario} />\r\n        <Pie />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nReactDOM.render(\r\n  <Suspense fallback=\"Loading..\">\r\n    <Index />\r\n  </Suspense>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}